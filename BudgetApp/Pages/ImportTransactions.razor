@page "/transactions/import/{BudgetIdParameter}"

@using BudgetApp.Core.Services
@using System.Dynamic
@using BudgetApp.Pages.Components.Imports
@using BudgetApp.Core.Features.BankAccounts.Models
@using BudgetApp.Core.Features.BankAccounts.Queries
@using BudgetApp.Core.Features.Transactions.Models
@using MediatR
@inject IMediator Mediator

<div class="container-fluid">

    <h3>Import transactions</h3>

    <RadzenSteps @ref="steps" Style="margin-top: 5%">
        <Steps>
            @* Select file step *@
            <RadzenStepsItem Text="Select file">
                <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H3" class="rz-my-6">1. Select a file to continue</RadzenText>
                <div class="text-center d-flex justify-content-center" style="margin-top: 3%">
                    <div class="col-5">
                        <InputFile id="file-upload" OnChange="@ProcessImportedCsvFile"/>
                    </div>
                </div>
            </RadzenStepsItem>

            @* Select headers step *@
            <RadzenStepsItem Text="Select fields" Disabled="!IsFileUploaded">
                <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H3" class="rz-my-6">2. Select matching fields</RadzenText>
                @if (IsFileUploaded && ImportedRows.Any())
                {
                    <ImportedTransactionSchemeForm
                        ExampleTransaction="ImportedRows.First()"
                        TransactionScheme="TransactionScheme"
                        BankAccounts="BankAccounts"
                        TransactionSchemeSaved="TransactionSchemeSaved"/>
                }
                else
                {
                    <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H3" class="rz-my-6">Upload file in first step</RadzenText>
                }
            </RadzenStepsItem>

            @* Verify transactions *@
            <RadzenStepsItem Text="Verify imported rows">
                <RadzenText TextStyle="TextStyle.H5" TagName="TagName.H3" class="rz-my-6">3. Verify imported transactions</RadzenText>
                @if (IsTransactionSchemeSaved)
                {
                    <VerifyImportedTransactionsForm
                        ImportedRows="ImportedRows"
                        BudgetId="BudgetId"
                        TransactionScheme="TransactionScheme"/>
                }
            </RadzenStepsItem>
        </Steps>
    </RadzenSteps>

</div>

@code {

    [Parameter]
    public string BudgetIdParameter { get; set; }

    private int BudgetId => int.Parse(BudgetIdParameter);

    private RadzenSteps steps;

    private List<ExpandoObject> ImportedRows = new List<ExpandoObject>();

    private ImportedTransactionScheme TransactionScheme { get; } = new();

    private List<BankAccountModel> BankAccounts { get; set; }

    private bool IsFileUploaded { get; set; }

    private bool IsTransactionSchemeSaved { get; set; }

    protected override async Task OnInitializedAsync()
    {
        BankAccounts = await Mediator.Send(new GetBankAccountsForBudget()
        {
            BudgetId = BudgetId
        });
    }

    private async Task ProcessImportedCsvFile(InputFileChangeEventArgs e)
    {
        const string csvType = "text/csv";
        if (e.File.ContentType != csvType)
        {
            return;
        }

        ImportedRows = await CsvService.GetRecordsFromCsvFile(e.File);
        IsFileUploaded = true;

        await NextStep();
    }

    private async Task TransactionSchemeSaved()
    {
        IsTransactionSchemeSaved = true;
        await NextStep();
    }


    private async Task NextStep()
    {
        steps.StepsCollection[steps.SelectedIndex + 1].Disabled = false;
        await steps.NextStep();
    }

}