@using BudgetApp.Core
@using BudgetApp.Domain.Enums
@using BudgetApp.Helpers
@using System.Transactions
@using BudgetApp.Core.Features.Budgets.Models
@using BudgetApp.Core.Features.Budgets.Queries
@using BudgetApp.Core.Features.Transactions.Models
@using BudgetApp.Core.Features.Transactions.Queries
@using BudgetApp.Infrastructure
@using MediatR
@inject DialogService DialogService
@inject IMediator Mediator

<div class="transactionContainer">
    <div class="buttonContainer">
        <RadzenButton Shade="Shade.Darker" Click="@(_ => TransactionDialog())" Text="Add" ButtonStyle="ButtonStyle.Secondary"/>
    </div>
    
    <RadzenDataGrid
        AllowFiltering="true"
        AllowColumnResize="true"
        AllowSorting="true"
        PageSize="10"
        AllowPaging="true"
        Data="@Transactions"
        TItem="TransactionModel"
        RowClick="(e) => TransactionDialog(e.Data)">
        <Columns>
            <RadzenDataGridColumn TItem="TransactionModel" Property="CreateDate" Title="Date"/>
            <RadzenDataGridColumn TItem="TransactionModel" Property="AmountText" Title="Amount">
                <Template Context="transaction">
                    <span class="@GetAmountCellStyle(transaction.Amount)">
                        @transaction.AmountText
                    </span>
                </Template>
            </RadzenDataGridColumn>
            <RadzenDataGridColumn TItem="TransactionModel" Property="Description" Title="Description"/>
            <RadzenDataGridColumn TItem="TransactionModel" Property="Status" Title="Status">
                <Template Context="transaction">
                    <span class="@GetStatusCellStyle(transaction.Status)">
                        @transaction.Status
                    </span>
                </Template>
            </RadzenDataGridColumn>
        </Columns>
    </RadzenDataGrid>
    
</div>

@code {
    
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    [Parameter]
    public int? BudgetId { get; set; }

    private BudgetModel budget { get; set; }

    private List<TransactionModel> Transactions { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetTransactions();
    }

    private async Task GetTransactions()
    {
        var authState = await AuthState;
        if (authState.User.Identity?.IsAuthenticated ?? false)
        {
            var defaultBudget = await Mediator.Send(new GetBudgetCommand()
            {
                BudgetId = BudgetId,
                UserId = authState.User.GetUserId()
            });
            
            if (defaultBudget.Success)
            {
                budget = defaultBudget.Value;

                var transactions = await Mediator.Send(new GetTransactionsForBudgetCommand()
                {
                    BudgetId = defaultBudget.Value.Id,
                    CurrentMonthOnly = false
                });

                Transactions = transactions;
            }
        }
    }

    private async Task TransactionDialog(TransactionModel? transaction = null)
    {
        var parameters = new Dictionary<string, object>
        {
            { "BudgetId", budget.Id },
            { "BankAccounts", budget.BankAccounts}
        };

        if (transaction is not null)
        {
            parameters.Add("Transaction", transaction);
        }

        var dialogTitle = transaction is null ? "Add transaction" : "Modify transaction";

        bool? isTransactionAdded = await DialogService.OpenAsync<TransactionForm>(dialogTitle, parameters);
        if (isTransactionAdded ?? false)
        {
            await GetTransactions();
        }
    }
    
    private string GetStatusCellStyle(TransactionStatusEnum status)
    {
        return status switch
        {
            TransactionStatusEnum.New => "new-status",
            TransactionStatusEnum.Completed => "completed-status",
            TransactionStatusEnum.Scheduled => "scheduled-status",
            _ => string.Empty
            };
    }

    private string GetAmountCellStyle(decimal amount)
    {
        return amount > 0
            ? "green-font"
            : "red-font";
    }
}