@using BudgetApp.Infrastructure
@using MediatR
@using BudgetApp.Core.Features.Budgets.Models
@using BudgetApp.Core.Features.Budgets.Queries
@using BudgetApp.Core.Features.Transactions.Models
@using BudgetApp.Core.Features.Transactions.Queries
@using BudgetApp.Domain.Enums
@using BudgetApp.Core.Features.BankAccounts.Queries
@using BudgetApp.Core.Features.Transactions.Commands
@using CsvHelper
@using System.Dynamic
@using System.Globalization
@using System.Transactions
@using BudgetApp.Core
@using BudgetApp.Core.Features.BankAccounts.Models
@using BudgetApp.Core.Features.Transactions.Helpers
@using BudgetApp.Core.Services
@using BudgetApp.Helpers
@using BudgetApp.Pages.Components.Imports
@using Radzen.Blazor
@inject DialogService DialogService
@inject IMediator Mediator
@inject NavigationManager NavigationManager


<div class="transactionContainer">
    
    <RadzenButton 
        ButtonStyle="ButtonStyle.Success"
        Icon="add_circle_outline" 
        class="mt-2 mb-4" 
        Text="Add" 
        Click="@InsertRow" 
        Disabled=@(TransactionToInsert != null || TransactionToUpdate != null) />

    <RadzenButton
        Shade="Shade.Darker"
        Text="Import"
        ButtonStyle="ButtonStyle.Secondary"
        Icon="upload"
        Click='() => NavigationManager.NavigateTo($"transactions/import/{BudgetId!.Value}")'/>
    
    <RadzenDataGrid
        @ref="TransactionsGrid"
        AllowAlternatingRows="false"
        AllowFiltering="true"
        AllowPaging="true"
        PageSize="10"
        AllowSorting="true"
        EditMode="DataGridEditMode.Single"
        Data="@Transactions"
        TItem="TransactionModel"
        RowUpdate="@OnUpdateRow"
        RowCreate="@OnCreateRow"
        ColumnWidth="200px">
        <Columns>
            @* Date *@
            <RadzenDataGridColumn TItem="TransactionModel" Property="CreateDate" Title="Date" SortOrder="SortOrder.Descending">
                <EditTemplate Context="transaction">
                    <RadzenDatePicker @bind-Value="transaction.CreateDate"/>
                </EditTemplate>
                <Template Context="transaction">
                    <span>@transaction.CreateDate.ToString("yyyy-MM-dd")</span>
                </Template>
            </RadzenDataGridColumn>

            @* Amount *@
            <RadzenDataGridColumn TItem="TransactionModel" Property="AmountText" Title="Amount">
                <EditTemplate Context="transaction">
                    <RadzenNumeric TValue="decimal" @bind-Value="transaction.Amount" Style="width: 50%;"/>
                </EditTemplate>
                <Template Context="transaction">
                    <span class="@TransactionHelper.GetAmountCellStyle(transaction.Amount)">
                        @transaction.AmountText
                    </span>
                </Template>
            </RadzenDataGridColumn>

            @* Description *@
            <RadzenDataGridColumn TItem="TransactionModel" Property="Description" Title="Description">
                <EditTemplate Context="transaction">
                    <RadzenTextBox @bind-Value="transaction.Description" Style="width: 70%;"/>
                </EditTemplate>
            </RadzenDataGridColumn>

            @* Status *@
            <RadzenDataGridColumn TItem="TransactionModel" Property="Status" Title="Status">
                <EditTemplate Context="transaction">
                    <RadzenDropDown TValue="TransactionStatusEnum" 
                                    Data="Enum.GetValues<TransactionStatusEnum>().Select(x => new { Value = x, Text = x.ToString() })" 
                                    TextProperty="Text" 
                                    ValueProperty="Value" 
                                    @bind-Value="transaction.Status"
                                    Style="width: 85%;"/>
                </EditTemplate>
                <Template Context="transaction">
                    <span class="@GetStatusCellStyle(transaction.Status)">
                        @transaction.Status
                    </span>
                </Template>
            </RadzenDataGridColumn>

            @* Account *@
            <RadzenDataGridColumn TItem="TransactionModel" Property="BankAccount.Name" Title="Account">
                <EditTemplate Context="transaction">
                    <RadzenDropDown TValue="int" Data="@BankAccounts"
                                    TextProperty="Name" ValueProperty="Id" @bind-Value="transaction.BankAccountId" Style="width: 85%;"/>
                </EditTemplate>
                <Template Context="transaction">
                    @transaction.BankAccount.Name
                </Template>
            </RadzenDataGridColumn>

            @* Actions  *@
            <RadzenDataGridColumn TItem="TransactionModel" Context="transaction" Filterable="false" Sortable="false" TextAlign="TextAlign.Right" Width="156px">
                <Template Context="transaction">
                    <RadzenButton Icon="edit" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(() => EditRow(transaction))" @onclick:stopPropagation="true">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(() => DeleteRow(transaction))" @onclick:stopPropagation="true">
                    </RadzenButton>
                </Template>
                <EditTemplate Context="transaction">
                    <RadzenButton Icon="check" ButtonStyle="ButtonStyle.Success" Variant="Variant.Flat" Size="ButtonSize.Medium" Click="@(() => SaveRow(transaction))">
                    </RadzenButton>
                    <RadzenButton Icon="close" ButtonStyle="ButtonStyle.Light" Variant="Variant.Flat" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(() => CancelEdit(transaction))">
                    </RadzenButton>
                    <RadzenButton ButtonStyle="ButtonStyle.Danger" Icon="delete" Variant="Variant.Flat" Shade="Shade.Lighter" Size="ButtonSize.Medium" class="my-1 ms-1" Click="@(() => DeleteRow(transaction))">
                    </RadzenButton>
                </EditTemplate>
            </RadzenDataGridColumn>

        </Columns>
    </RadzenDataGrid>

</div>

@code {
    
    [CascadingParameter]
    public Task<AuthenticationState> AuthState { get; set; }

    [Parameter]
    public int? BudgetId { get; set; }

    [Parameter]
    public EventCallback<bool> TransactionModified { get; set; }

    private BudgetModel Budget { get; set; }

    private List<TransactionModel> Transactions { get; set; }

    private List<BankAccountModel> BankAccounts { get; set; }

    private RadzenDataGrid<TransactionModel> TransactionsGrid { get; set; }

    private TransactionModel TransactionToInsert { get; set; }

    private TransactionModel TransactionToUpdate { get; set; }

    private int UserId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetTransactions();
        await GetBankAccounts();
    }

    #region GetInitialValues

    private async Task GetTransactions()
    {
        var authState = await AuthState;
        if (authState.User.Identity?.IsAuthenticated ?? false)
        {
            UserId = authState.User.GetUserId();
            
            var getBudgetCommand = new GetBudget()
            {
                BudgetId = BudgetId,
                UserId = UserId
            };

            var defaultBudget = await Mediator.Send(getBudgetCommand);
            if (defaultBudget.Success)
            {
                Budget = defaultBudget.Value;

                var transactions = await Mediator.Send(new GetTransactionsForBudget
                {
                    BudgetId = defaultBudget.Value.Id,
                    CurrentMonthOnly = false
                });

                Transactions = transactions;
            }
        }
    }

    private async Task GetBankAccounts()
    {
        BankAccounts = await Mediator.Send(new GetBankAccountsForBudget() { BudgetId = Budget.Id });
    }

    #endregion

    #region ListElementActions

    private async Task InsertRow()
    {
        TransactionToInsert = new TransactionModel()
        {
            CreateDate = TimeService.Now,
            BudgetId = BudgetId!.Value
        };
        
        await TransactionsGrid.InsertRow(TransactionToInsert);
    }
    
    
    private async Task OnCreateRow(TransactionModel transaction)
    {
        transaction.BankAccount = BankAccounts.Single(a => a.Id == transaction.BankAccountId);
        await Mediator.Send(new CreateTransaction()
        {
            TransactionModel = transaction,
            UserId = UserId
        });

        TransactionToInsert = null;
        await ReloadBankAccountSummary();
    }
    
    private async Task OnUpdateRow(TransactionModel transaction)
    {
        await Mediator.Send(new UpdateTransaction()
        {
            TransactionModel = transaction,
            UserId = UserId
        });

        await TransactionsGrid.Reload();
        await ReloadBankAccountSummary();
    }
    
    private async Task EditRow(TransactionModel transaction)
    {
        TransactionToUpdate = transaction;
        await TransactionsGrid.EditRow(transaction);
    }
    
    private async Task SaveRow(TransactionModel transaction)
    {
        await TransactionsGrid.UpdateRow(transaction);
    }

    private void CancelEdit(TransactionModel transaction)
    {
        if (transaction == TransactionToInsert)
        {
            TransactionToInsert = null;
        }

        TransactionToUpdate = null;
        TransactionsGrid.CancelEditRow(transaction);
    }

    private async Task DeleteRow(TransactionModel transaction)
    {
        var dialogResult = await DialogService.Confirm("Are you sure you want to delete this transaction?", "Delete transaction",
            new ConfirmOptions()
            {
                OkButtonText = "Yes",
                CancelButtonText = "No",
                
            });

        if (dialogResult.HasValue && dialogResult.Value)
        {
            if (transaction == TransactionToInsert)
            {
                TransactionToInsert = null;
            }

            if (transaction == TransactionToUpdate)
            {
                TransactionToUpdate = null;
            }

            var existingTransaction = Transactions.FirstOrDefault(a => a.Id == transaction.Id);
            if (existingTransaction is not null)
            {
                await Mediator.Send(new DeleteTransaction()
                {
                    UserId = UserId,
                    TransactionId = existingTransaction.Id
                });

                await ReloadBankAccountSummary();
                await TransactionsGrid.Reload();
            }
        }
    }
    
    #endregion

    #region CustomStylesForRowCells

    private string GetStatusCellStyle(TransactionStatusEnum status)
    {
        return status switch
        {
            TransactionStatusEnum.New => "new-status",
            TransactionStatusEnum.Completed => "completed-status",
            TransactionStatusEnum.Scheduled => "scheduled-status",
            _ => string.Empty
            };
    }

    

    #endregion

    private async Task ReloadBankAccountSummary()
    {
        await TransactionModified.InvokeAsync();
    }
    
    private async Task ProcessImportedCsvFile(InputFileChangeEventArgs e)
    {
        const string csvType = "text/csv";
        if (e.File.ContentType != csvType)
        {
            //TODO info about required CSV file
            return;
        }
        
        var fileDataBase64 = await CsvService.ConvertFileToBase64(e.File);
        NavigationManager.NavigateTo($"/transactions/import?importedFileData={fileDataBase64}");
    }
}